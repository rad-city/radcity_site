{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/browsernizr/index.js","node_modules/browsernizr/lib/Modernizr.js","node_modules/browsernizr/lib/ModernizrProto.js","node_modules/browsernizr/lib/classes.js","node_modules/browsernizr/lib/computedStyle.js","node_modules/browsernizr/lib/contains.js","node_modules/browsernizr/lib/createElement.js","node_modules/browsernizr/lib/cssToDOM.js","node_modules/browsernizr/lib/cssomPrefixes.js","node_modules/browsernizr/lib/docElement.js","node_modules/browsernizr/lib/domPrefixes.js","node_modules/browsernizr/lib/domToCSS.js","node_modules/browsernizr/lib/fnBind.js","node_modules/browsernizr/lib/getBody.js","node_modules/browsernizr/lib/html5shiv.js","node_modules/browsernizr/lib/injectElementWithStyles.js","node_modules/browsernizr/lib/is.js","node_modules/browsernizr/lib/isSVG.js","node_modules/browsernizr/lib/mStyle.js","node_modules/browsernizr/lib/modElem.js","node_modules/browsernizr/lib/nativeTestProps.js","node_modules/browsernizr/lib/omPrefixes.js","node_modules/browsernizr/lib/prefixes.js","node_modules/browsernizr/lib/setClasses.js","node_modules/browsernizr/lib/testAllProps.js","node_modules/browsernizr/lib/testDOMProps.js","node_modules/browsernizr/lib/testProps.js","node_modules/browsernizr/lib/testPropsAll.js","node_modules/browsernizr/lib/testRunner.js","node_modules/browsernizr/lib/testStyles.js","node_modules/browsernizr/lib/tests.js","node_modules/browsernizr/test/css/flexbox.js","node_modules/browsernizr/test/css/transforms3d.js","node_modules/browsernizr/test/css/transitions.js","node_modules/browsernizr/test/css/vwunit.js","node_modules/browsernizr/test/touchevents.js","node_modules/dom-helpers/class/addClass.js","node_modules/dom-helpers/class/hasClass.js","node_modules/dom-helpers/class/removeClass.js","node_modules/performance-now/lib/performance-now.js","node_modules/process/browser.js","node_modules/raf/index.js","src/script/drawer.js","src/script/hero.js","src/script/script.js","src/script/utils/custom-event-polyfill.js","src/script/utils/modernizr.js","src/script/utils/ready.js","src/script/utils/scroll-listener.js","src/script/utils/scroll-to.js","src/script/utils/spring.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzptBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"script.0.1.0.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var Modernizr = require('./lib/Modernizr'),\n    ModernizrProto = require('./lib/ModernizrProto'),\n    classes = require('./lib/classes'),\n    testRunner = require('./lib/testRunner'),\n    setClasses = require('./lib/setClasses');\n\n// Run each test\ntestRunner();\n\n// Remove the \"no-js\" class if it exists\nsetClasses(classes);\n\ndelete ModernizrProto.addTest;\ndelete ModernizrProto.addAsyncTest;\n\n// Run the things that are supposed to run after the tests\nfor (var i = 0; i < Modernizr._q.length; i++) {\n  Modernizr._q[i]();\n}\n\nmodule.exports = Modernizr;\n","var ModernizrProto = require('./ModernizrProto.js');\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  module.exports = Modernizr;\n\n","var tests = require('./tests.js');\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.4.0 (browsernizr 2.2.0)',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  module.exports = ModernizrProto;\n\n","\n  var classes = [];\n  module.exports = classes;\n\n","\n\n  /**\n   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n   * called inside of a hidden iframe\n   *\n   * @access private\n   * @function computedStyle\n   * @param {HTMLElement|SVGElement} - The element we want to find the computed styles of\n   * @param {string|null} [pseudoSelector]- An optional pseudo element selector (e.g. :before), of null if none\n   * @returns {CSSStyleDeclaration}\n   */\n\n  function computedStyle(elem, pseudo, prop) {\n    var result;\n\n    if ('getComputedStyle' in window) {\n      result = getComputedStyle.call(window, elem, pseudo);\n      var console = window.console;\n\n      if (result !== null) {\n        if (prop) {\n          result = result.getPropertyValue(prop);\n        }\n      } else {\n        if (console) {\n          var method = console.error ? 'error' : 'log';\n          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n        }\n      }\n    } else {\n      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n    }\n\n    return result;\n  }\n\n  module.exports = computedStyle;\n\n","\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean}\n   */\n\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  module.exports = contains;\n\n","var isSVG = require('./isSVG.js');\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  module.exports = createElement;\n\n","\n  /**\n   * cssToDOM takes a kebab-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of kebab-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  module.exports = cssToDOM;\n\n","var ModernizrProto = require('./ModernizrProto.js');\nvar omPrefixes = require('./omPrefixes.js');\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n  module.exports = cssomPrefixes;\n\n","\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  module.exports = docElement;\n\n","var ModernizrProto = require('./ModernizrProto.js');\nvar omPrefixes = require('./omPrefixes.js');\n  /**\n   * List of JavaScript DOM values used for tests\n   *\n   * @memberof Modernizr\n   * @name Modernizr._domPrefixes\n   * @optionName Modernizr._domPrefixes\n   * @optionProp domPrefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n   * than kebab-case properties, all properties are their Capitalized variant\n   *\n   * ```js\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n   * ```\n   */\n\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n  module.exports = domPrefixes;\n\n","\n  /**\n   * domToCSS takes a camelCase string and converts it to kebab-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The kebab-case version of the supplied name\n   */\n\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  module.exports = domToCSS;\n\n","\n  /**\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n   *\n   * @access private\n   * @function fnBind\n   * @param {function} fn - a function you want to change `this` reference to\n   * @param {object} that - the `this` you want to call the function with\n   * @returns {function} The wrapped version of the supplied function\n   */\n\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  module.exports = fnBind;\n\n","var createElement = require('./createElement.js');\nvar isSVG = require('./isSVG.js');\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  module.exports = getBody;\n\n","var isSVG = require('./isSVG.js');\n/**\n  * @optionName html5shiv\n  * @optionProp html5shiv\n  */\n\n  // Take the html5 variable out of the html5shiv scope so we can return it.\n  var html5;\n  if (!isSVG) {\n    /**\n     * @preserve HTML5 Shiv 3.7.3 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n      /** version */\n      var version = '3.7.3';\n\n      /** Preset options */\n      var options = window.html5 || {};\n\n      /** Used to skip problem elements */\n      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n      /** Not all elements can be cloned in IE **/\n      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n      /** Detect whether the browser supports default html5 styles */\n      var supportsHtml5Styles;\n\n      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n      var expando = '_html5shiv';\n\n      /** The id for the the documents expando */\n      var expanID = 0;\n\n      /** Cached data for each document */\n      var expandoData = {};\n\n      /** Detect whether the browser supports unknown elements */\n      var supportsUnknownElements;\n\n      (function() {\n        try {\n          var a = document.createElement('a');\n          a.innerHTML = '<xyz></xyz>';\n          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n          supportsHtml5Styles = ('hidden' in a);\n\n          supportsUnknownElements = a.childNodes.length == 1 || (function() {\n            // assign a false positive if unable to shiv\n            (document.createElement)('a');\n            var frag = document.createDocumentFragment();\n            return (\n              typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n            );\n          }());\n        } catch(e) {\n          // assign a false positive if detection fails => unable to shiv\n          supportsHtml5Styles = true;\n          supportsUnknownElements = true;\n        }\n\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Creates a style sheet with the given CSS text and adds it to the document.\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @param {String} cssText The CSS text.\n       * @returns {StyleSheet} The style element.\n       */\n      function addStyleSheet(ownerDocument, cssText) {\n        var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n        p.innerHTML = 'x<style>' + cssText + '</style>';\n        return parent.insertBefore(p.lastChild, parent.firstChild);\n      }\n\n      /**\n       * Returns the value of `html5.elements` as an array.\n       * @private\n       * @returns {Array} An array of shived element node names.\n       */\n      function getElements() {\n        var elements = html5.elements;\n        return typeof elements == 'string' ? elements.split(' ') : elements;\n      }\n\n      /**\n       * Extends the built-in list of html5 elements\n       * @memberOf html5\n       * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\n       * @param {Document} ownerDocument The context document.\n       */\n      function addElements(newElements, ownerDocument) {\n        var elements = html5.elements;\n        if(typeof elements != 'string'){\n          elements = elements.join(' ');\n        }\n        if(typeof newElements != 'string'){\n          newElements = newElements.join(' ');\n        }\n        html5.elements = elements +' '+ newElements;\n        shivDocument(ownerDocument);\n      }\n\n      /**\n       * Returns the data associated to the given document\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Object} An object of data.\n       */\n      function getExpandoData(ownerDocument) {\n        var data = expandoData[ownerDocument[expando]];\n        if (!data) {\n          data = {};\n          expanID++;\n          ownerDocument[expando] = expanID;\n          expandoData[expanID] = data;\n        }\n        return data;\n      }\n\n      /**\n       * returns a shived element for the given nodeName and document\n       * @memberOf html5\n       * @param {String} nodeName name of the element\n       * @param {Document|DocumentFragment} ownerDocument The context document.\n       * @returns {Object} The shived element.\n       */\n      function createElement(nodeName, ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createElement(nodeName);\n        }\n        if (!data) {\n          data = getExpandoData(ownerDocument);\n        }\n        var node;\n\n        if (data.cache[nodeName]) {\n          node = data.cache[nodeName].cloneNode();\n        } else if (saveClones.test(nodeName)) {\n          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n        } else {\n          node = data.createElem(nodeName);\n        }\n\n        // Avoid adding some elements to fragments in IE < 9 because\n        // * Attributes like `name` or `type` cannot be set/changed once an element\n        //   is inserted into a document/fragment\n        // * Link elements with `src` attributes that are inaccessible, as with\n        //   a 403 response, will cause the tab/window to crash\n        // * Script elements appended to fragments will execute when their `src`\n        //   or `text` property is set\n        return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n      }\n\n      /**\n       * returns a shived DocumentFragment for the given document\n       * @memberOf html5\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived DocumentFragment.\n       */\n      function createDocumentFragment(ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createDocumentFragment();\n        }\n        data = data || getExpandoData(ownerDocument);\n        var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n        for(;i<l;i++){\n          clone.createElement(elems[i]);\n        }\n        return clone;\n      }\n\n      /**\n       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n       * @private\n       * @param {Document|DocumentFragment} ownerDocument The document.\n       * @param {Object} data of the document.\n       */\n      function shivMethods(ownerDocument, data) {\n        if (!data.cache) {\n          data.cache = {};\n          data.createElem = ownerDocument.createElement;\n          data.createFrag = ownerDocument.createDocumentFragment;\n          data.frag = data.createFrag();\n        }\n\n\n        ownerDocument.createElement = function(nodeName) {\n          //abort shiv\n          if (!html5.shivMethods) {\n            return data.createElem(nodeName);\n          }\n          return createElement(nodeName, ownerDocument, data);\n        };\n\n        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n                                                        'var n=f.cloneNode(),c=n.createElement;' +\n                                                        'h.shivMethods&&(' +\n                                                        // unroll the `createElement` calls\n                                                        getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {\n                                                          data.createElem(nodeName);\n                                                          data.frag.createElement(nodeName);\n                                                          return 'c(\"' + nodeName + '\")';\n                                                        }) +\n          ');return n}'\n                                                       )(html5, data.frag);\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivDocument(ownerDocument) {\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        var data = getExpandoData(ownerDocument);\n\n        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n          data.hasCSS = !!addStyleSheet(ownerDocument,\n                                        // corrects block display not defined in IE6/7/8/9\n                                        'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n                                        // adds styling not present in IE6/7/8/9\n                                        'mark{background:#FF0;color:#000}' +\n                                        // hides non-rendered elements\n                                        'template{display:none}'\n                                       );\n        }\n        if (!supportsUnknownElements) {\n          shivMethods(ownerDocument, data);\n        }\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * The `html5` object is exposed so that more elements can be shived and\n       * existing shiving can be detected on iframes.\n       * @type Object\n       * @example\n       *\n       * // options can be changed before the script is included\n       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n       */\n      var html5 = {\n\n        /**\n         * An array or space separated string of node names of the elements to shiv.\n         * @memberOf html5\n         * @type Array|String\n         */\n        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n\n        /**\n         * current version of html5shiv\n         */\n        'version': version,\n\n        /**\n         * A flag to indicate that the HTML5 style sheet should be inserted.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivCSS': (options.shivCSS !== false),\n\n        /**\n         * Is equal to true if a browser supports creating unknown/HTML5 elements\n         * @memberOf html5\n         * @type boolean\n         */\n        'supportsUnknownElements': supportsUnknownElements,\n\n        /**\n         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n         * methods should be overwritten.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivMethods': (options.shivMethods !== false),\n\n        /**\n         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n         * @memberOf html5\n         * @type String\n         */\n        'type': 'default',\n\n        // shivs the document according to the specified `html5` object options\n        'shivDocument': shivDocument,\n\n        //creates a shived element\n        createElement: createElement,\n\n        //creates a shived documentFragment\n        createDocumentFragment: createDocumentFragment,\n\n        //extends list of elements\n        addElements: addElements\n      };\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose html5\n      window.html5 = html5;\n\n      // shiv the document\n      shivDocument(document);\n\n      if(typeof module == 'object' && module.exports){\n        module.exports = html5;\n      }\n\n    }(typeof window !== 'undefined' ? window : this, document));\n  }\n  module.exports = html5;\n\n","var ModernizrProto = require('./ModernizrProto.js');\nvar docElement = require('./docElement.js');\nvar createElement = require('./createElement.js');\nvar getBody = require('./getBody.js');\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  module.exports = injectElementWithStyles;\n\n","\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  module.exports = is;\n\n","var docElement = require('./docElement.js');\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  module.exports = isSVG;\n\n","var Modernizr = require('./Modernizr.js');\nvar modElem = require('./modElem.js');\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  module.exports = mStyle;\n\n","var Modernizr = require('./Modernizr.js');\nvar createElement = require('./createElement.js');\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  module.exports = modElem;\n\n","var injectElementWithStyles = require('./injectElementWithStyles.js');\nvar domToCSS = require('./domToCSS.js');\nvar computedStyle = require('./computedStyle.js');\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n        return computedStyle(node, null, 'position') == 'absolute';\n      });\n    }\n    return undefined;\n  }\n  module.exports = nativeTestProps;\n\n","\n  /**\n   * If the browsers follow the spec, then they would expose vendor-specific styles as:\n   *   elem.style.WebkitBorderRadius\n   * instead of something like the following (which is technically incorrect):\n   *   elem.style.webkitBorderRadius\n\n   * WebKit ghosts their properties in lowercase but Opera & Moz do not.\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\n\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\n   *\n   * @access private\n   * @returns {string} The string representing the vendor-specific style properties\n   */\n\n  var omPrefixes = 'Moz O ms Webkit';\n  module.exports = omPrefixes;\n\n","var ModernizrProto = require('./ModernizrProto.js');\n  /**\n   * List of property values to set for css tests. See ticket #21\n   * http://git.io/vUGl4\n   *\n   * @memberof Modernizr\n   * @name Modernizr._prefixes\n   * @optionName Modernizr._prefixes\n   * @optionProp prefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._prefixes is the internal list of prefixes that we test against\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n   * an array of kebab-case vendor prefixes you can use within your code.\n   *\n   * Some common use cases include\n   *\n   * Generating all possible prefixed version of a CSS property\n   * ```js\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n   *\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n   * ```\n   *\n   * Generating all possible prefixed version of a CSS value\n   * ```js\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n   *\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n   * ```\n   */\n\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\n  // values in feature detects to continue to work\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['','']);\n\n  // expose these for the plugin API. Look in the source for how to join() them against your input\n  ModernizrProto._prefixes = prefixes;\n\n  module.exports = prefixes;\n\n","var Modernizr = require('./Modernizr.js');\nvar docElement = require('./docElement.js');\nvar isSVG = require('./isSVG.js');\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n\n  }\n\n  module.exports = setClasses;\n\n","var ModernizrProto = require('./ModernizrProto.js');\nvar testPropsAll = require('./testPropsAll.js');\n  /**\n   * testAllProps determines whether a given CSS property is supported in the browser\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testAllProps\n   * @optionName Modernizr.testAllProps()\n   * @optionProp testAllProps\n   * @access public\n   * @function testAllProps\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n   * @param {string} [value] - String of the value to test\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n   * @example\n   *\n   * testAllProps determines whether a given CSS property, in some prefixed form,\n   * is supported by the browser.\n   *\n   * ```js\n   * testAllProps('boxSizing')  // true\n   * ```\n   *\n   * It can optionally be given a CSS value in string form to test if a property\n   * value is valid\n   *\n   * ```js\n   * testAllProps('display', 'block') // true\n   * testAllProps('display', 'penguin') // false\n   * ```\n   *\n   * A boolean can be passed as a third parameter to skip the value check when\n   * native detection (@supports) isn't available.\n   *\n   * ```js\n   * testAllProps('shapeOutside', 'content-box', true);\n   * ```\n   */\n\n  function testAllProps(prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n  module.exports = testAllProps;\n\n","var is = require('./is.js');\nvar fnBind = require('./fnBind.js');\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   *\n   * @access private\n   * @function testDOMProps\n   * @param {array.<string>} props - An array of properties to test for\n   * @param {object} obj - An object or Element you want to use to test the parameters again\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n   * @returns {false|*} returns false if the prop is unsupported, otherwise the value that is supported\n   */\n  function testDOMProps(props, obj, elem) {\n    var item;\n\n    for (var i in props) {\n      if (props[i] in obj) {\n\n        // return the property name as a string\n        if (elem === false) {\n          return props[i];\n        }\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  module.exports = testDOMProps;\n\n","var contains = require('./contains.js');\nvar mStyle = require('./mStyle.js');\nvar createElement = require('./createElement.js');\nvar nativeTestProps = require('./nativeTestProps.js');\nvar is = require('./is.js');\nvar cssToDOM = require('./cssToDOM.js');\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    // for strict XHTML browsers the hardly used samp element is used\n    var elems = ['modernizr', 'tspan', 'samp'];\n    while (!mStyle.style && elems.length) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed == 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  module.exports = testProps;\n\n","var ModernizrProto = require('./ModernizrProto.js');\nvar cssomPrefixes = require('./cssomPrefixes.js');\nvar is = require('./is.js');\nvar testProps = require('./testProps.js');\nvar domPrefixes = require('./domPrefixes.js');\nvar testDOMProps = require('./testDOMProps.js');\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   * We specify literally ALL possible (known and/or likely) properties on\n   * the element including the non-vendor prefixed one, for forward-\n   * compatibility.\n   *\n   * @access private\n   * @function testPropsAll\n   * @param {string} prop - A string of the property to test for\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n   * @param {string} [value] - A string of a css value\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n   * @returns {false|string} returns the string version of the property, or false if it is unsupported\n   */\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  // or any of its vendor-prefixed variants, is recognized\n  //\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  module.exports = testPropsAll;\n\n","var tests = require('./tests.js');\nvar Modernizr = require('./Modernizr.js');\nvar classes = require('./classes.js');\nvar is = require('./is.js');\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  module.exports = testRunner;\n\n","var ModernizrProto = require('./ModernizrProto.js');\nvar injectElementWithStyles = require('./injectElementWithStyles.js');\n  /**\n   * testStyles injects an element with style element and some CSS rules\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testStyles\n   * @optionName Modernizr.testStyles()\n   * @optionProp testStyles\n   * @access public\n   * @function testStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   * @example\n   *\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n   * along with (possibly multiple) DOM elements. This lets you check for features\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n   *   // elem is the first DOM node in the page (by default #modernizr)\n   *   // rule is the first argument you supplied - the CSS rule in string form\n   *\n   *   addTest('widthworks', elem.style.width === '9px')\n   * });\n   * ```\n   *\n   * If your test requires multiple nodes, you can include a third argument\n   * indicating how many additional div elements to include on the page. The\n   * additional nodes are injected as children of the `elem` that is returned as\n   * the first argument to the callback.\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n   *   document.getElementById('modernizr').style.width === '1px'; // true\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\n   * }, 1);\n   * ```\n   *\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n   * the second additional is `#modernizr3`, etc.).\n   * If you want to have more meaningful IDs for your function, you can provide\n   * them as the fourth argument, as an array of strings\n   *\n   * ```js\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n   *   elem.firstChild === document.getElementById('foo'); // true\n   *   elem.lastChild === document.getElementById('bar'); // true\n   * }, 2, ['foo', 'bar']);\n   * ```\n   *\n   */\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n  module.exports = testStyles;\n\n","\n  var tests = [];\n  module.exports = tests;\n\n","/*!\n{\n  \"name\": \"Flexbox\",\n  \"property\": \"flexbox\",\n  \"caniuse\": \"flexbox\",\n  \"tags\": [\"css\"],\n  \"notes\": [{\n    \"name\": \"The _new_ flexbox\",\n    \"href\": \"http://dev.w3.org/csswg/css3-flexbox\"\n  }],\n  \"warnings\": [\n    \"A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect.\"\n  ]\n}\n!*/\n/* DOC\nDetects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\n*/\nvar Modernizr = require('./../../lib/Modernizr.js');\nvar testAllProps = require('./../../lib/testAllProps.js');\n  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));\n\n","/*!\n{\n  \"name\": \"CSS Transforms 3D\",\n  \"property\": \"csstransforms3d\",\n  \"caniuse\": \"transforms3d\",\n  \"tags\": [\"css\"],\n  \"warnings\": [\n    \"Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004\"\n  ]\n}\n!*/\nvar Modernizr = require('./../../lib/Modernizr.js');\nvar testAllProps = require('./../../lib/testAllProps.js');\nvar testStyles = require('./../../lib/testStyles.js');\nvar docElement = require('./../../lib/docElement.js');\n  Modernizr.addTest('csstransforms3d', function() {\n    var ret = !!testAllProps('perspective', '1px', true);\n    var usePrefix = Modernizr._config.usePrefixes;\n\n    // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n    //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n    //   some conditions. As a result, Webkit typically recognizes the syntax but\n    //   will sometimes throw a false positive, thus we must do a more thorough check:\n    if (ret && (!usePrefix || 'webkitPerspective' in docElement.style)) {\n      var mq;\n      var defaultStyle = '#modernizr{width:0;height:0}';\n      // Use CSS Conditional Rules if available\n      if (Modernizr.supports) {\n        mq = '@supports (perspective: 1px)';\n      } else {\n        // Otherwise, Webkit allows this media query to succeed only if the feature is enabled.\n        // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n        mq = '@media (transform-3d)';\n        if (usePrefix) {\n          mq += ',(-webkit-transform-3d)';\n        }\n      }\n\n      mq += '{#modernizr{width:7px;height:18px;margin:0;padding:0;border:0}}';\n\n      testStyles(defaultStyle + mq, function(elem) {\n        ret = elem.offsetWidth === 7 && elem.offsetHeight === 18;\n      });\n    }\n\n    return ret;\n  });\n\n","/*!\n{\n  \"name\": \"CSS Transitions\",\n  \"property\": \"csstransitions\",\n  \"caniuse\": \"css-transitions\",\n  \"tags\": [\"css\"]\n}\n!*/\nvar Modernizr = require('./../../lib/Modernizr.js');\nvar testAllProps = require('./../../lib/testAllProps.js');\n  Modernizr.addTest('csstransitions', testAllProps('transition', 'all', true));\n\n","/*!\n{\n  \"name\": \"CSS vw unit\",\n  \"property\": \"cssvwunit\",\n  \"caniuse\": \"viewport-units\",\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_vwunit\"],\n  \"notes\": [{\n    \"name\": \"Related Modernizr Issue\",\n    \"href\": \"https://github.com/Modernizr/Modernizr/issues/572\"\n  },{\n    \"name\": \"JSFiddle Example\",\n    \"href\": \"https://jsfiddle.net/FWeinb/etnYC/\"\n  }]\n}\n!*/\nvar Modernizr = require('./../../lib/Modernizr.js');\nvar testStyles = require('./../../lib/testStyles.js');\nvar computedStyle = require('./../../lib/computedStyle.js');\n  testStyles('#modernizr { width: 50vw; }', function(elem) {\n    var width = parseInt(window.innerWidth / 2, 10);\n    var compStyle = parseInt(computedStyle(elem, null, 'width'), 10);\n\n    Modernizr.addTest('cssvwunit', compStyle == width);\n  });\n\n","/*!\n{\n  \"name\": \"Touch Events\",\n  \"property\": \"touchevents\",\n  \"caniuse\" : \"touch\",\n  \"tags\": [\"media\", \"attribute\"],\n  \"notes\": [{\n    \"name\": \"Touch Events spec\",\n    \"href\": \"https://www.w3.org/TR/2013/WD-touch-events-20130124/\"\n  }],\n  \"warnings\": [\n    \"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\"\n  ],\n  \"knownBugs\": [\n    \"False-positive on some configurations of Nokia N900\",\n    \"False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\"\n  ]\n}\n!*/\n/* DOC\nIndicates if the browser supports the W3C Touch Events API.\n\nThis *does not* necessarily reflect a touchscreen device:\n\n* Older touchscreen devices only emulate mouse events\n* Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\n* Some browsers & OS setups may enable touch APIs when no touchscreen is connected\n* Future browsers may implement other event models for touch interactions\n\nSee this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\n\nIt's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\n\nThis test will also return `true` for Firefox 4 Multitouch support.\n*/\nvar Modernizr = require('./../lib/Modernizr.js');\nvar prefixes = require('./../lib/prefixes.js');\nvar testStyles = require('./../lib/testStyles.js');\n  // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\n  Modernizr.addTest('touchevents', function() {\n    var bool;\n    if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n      bool = true;\n    } else {\n      // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n      // https://git.io/vznFH\n      var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\n      testStyles(query, function(node) {\n        bool = node.offsetTop === 9;\n      });\n    }\n    return bool;\n  });\n\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addClass;\n\nvar _hasClass = require('./hasClass');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!(0, _hasClass2.default)(element)) element.className = element.className + ' ' + className;\n}\nmodule.exports = exports['default'];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hasClass;\nfunction hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);else return (\" \" + element.className + \" \").indexOf(\" \" + className + \" \") !== -1;\n}\nmodule.exports = exports[\"default\"];","'use strict';\n\nmodule.exports = function removeClass(element, className) {\n  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n};","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var now = require('performance-now')\n  , root = typeof window === 'undefined' ? global : window\n  , vendors = ['moz', 'webkit']\n  , suffix = 'AnimationFrame'\n  , raf = root['request' + suffix]\n  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]\n\nfor(var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix]\n  caf = root[vendors[i] + 'Cancel' + suffix]\n      || root[vendors[i] + 'CancelRequest' + suffix]\n}\n\n// Some versions of FF have rAF but not cAF\nif(!raf || !caf) {\n  var last = 0\n    , id = 0\n    , queue = []\n    , frameDuration = 1000 / 60\n\n  raf = function(callback) {\n    if(queue.length === 0) {\n      var _now = now()\n        , next = Math.max(0, frameDuration - (_now - last))\n      last = next + _now\n      setTimeout(function() {\n        var cp = queue.slice(0)\n        // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n        queue.length = 0\n        for(var i = 0; i < cp.length; i++) {\n          if(!cp[i].cancelled) {\n            try{\n              cp[i].callback(last)\n            } catch(e) {\n              setTimeout(function() { throw e }, 0)\n            }\n          }\n        }\n      }, Math.round(next))\n    }\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    })\n    return id\n  }\n\n  caf = function(handle) {\n    for(var i = 0; i < queue.length; i++) {\n      if(queue[i].handle === handle) {\n        queue[i].cancelled = true\n      }\n    }\n  }\n}\n\nmodule.exports = function(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn)\n}\nmodule.exports.cancel = function() {\n  caf.apply(root, arguments)\n}\nmodule.exports.polyfill = function() {\n  root.requestAnimationFrame = raf\n  root.cancelAnimationFrame = caf\n}\n","import ready from './utils/ready';\n\nimport addClass from 'dom-helpers/class/addClass';\nimport hasClass from 'dom-helpers/class/hasClass';\nimport removeClass from 'dom-helpers/class/removeClass';\n\n\n// Heroes\nready(() => {\n\tlet drawer = document.getElementsByClassName('drawer'),\n\t\theader = document.getElementsByClassName('header'),\n\t\ttoggle = document.getElementsByClassName('header__nav-toggle');\n\n\tif (drawer && drawer[0] && header && header[0] && toggle && toggle[0]) {\n\t\tdrawer = drawer[0];\n\t\theader = header[0];\n\t\ttoggle = toggle[0];\n\n\t\ttoggle.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\n\t\t\tif (hasClass(drawer, 'drawer--open')) {\n\t\t\t\tremoveClass(header, 'header--drawer-open');\n\t\t\t\tremoveClass(drawer, 'drawer--open');\n\t\t\t} else {\n\t\t\t\taddClass(header, 'header--drawer-open');\n\t\t\t\taddClass(drawer, 'drawer--open');\n\t\t\t}\n\t\t});\n\t}\n});\n","import ready from './utils/ready';\nimport { scrollDistance } from './utils/scroll-to';\n\n// Heroes\nready(() => {\n\tlet heroes = document.getElementsByClassName('hero');\n\n\tfor (let i = 0; i < heroes.length; i++) {\n\t\tlet hero = heroes[i],\n\t\t\tarrow = hero.getElementsByClassName('hero__arrow');\n\n\t\tif (arrow && arrow[0]) {\n\t\t\tarrow = arrow[0];\n\n\t\t\tarrow.addEventListener('click', event => {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tlet rect = hero.getBoundingClientRect();\n\t\t\t\tscrollDistance(rect.top + rect.height);\n\t\t\t});\n\t\t}\n\t}\n});\n","import './utils/modernizr';\n\nimport './drawer';\n\nimport './hero';\n","// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n(function () {\n\tif (typeof window.CustomEvent === 'function') {\n\t\treturn false;\n\t}\n\n\tfunction CustomEvent ( event, params ) {\n\t\tparams = params || { bubbles: false, cancelable: false, detail: undefined };\n\t\tvar evt = document.createEvent( 'CustomEvent' );\n\t\tevt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n\t\treturn evt;\n\t}\n\n\tCustomEvent.prototype = window.Event.prototype;\n\n\twindow.CustomEvent = CustomEvent;\n})();\n","/**\n * @overview Browsernizr\n *\n * @description\n * Import (and initiate) app-wide tests.\n *\n * @author ljd\n */\n// Shim HTML5\nimport 'browsernizr/lib/html5shiv';\n\n// Misc test\nimport 'browsernizr/test/touchevents';\nimport 'browsernizr/test/css/flexbox';\nimport 'browsernizr/test/css/transitions';\nimport 'browsernizr/test/css/transforms3d';\nimport 'browsernizr/test/css/vwunit';\n\n// Initialize and export\nimport Modernizr from 'browsernizr';\n\nexport default Modernizr;\n","export default function ready(fn) {\n\tif (document.attachEvent ? document.readyState === 'complete' : document.readyState !== 'loading'){\n\t\tfn();\n\t} else {\n\t\tdocument.addEventListener('DOMContentLoaded', fn);\n\t}\n}\n","/**\n * @name koalition.helpers:ScrollListener\n * @description\n * Virtual scroll listeners for DOM elements. Based on [VirtualScroll](https://raw.githubusercontent.com/drojdjou/bartekdrozdz.com/master/static/src/framework/VirtualScroll.js)\n */\n\nimport raf from 'raf';\n\nconst hasWheelEvent = 'onwheel' in document;\nconst hasMouseWheelEvent = 'onmousewheel' in document;\nconst hasTouch = 'ontouchstart' in document;\nconst hasTouchWin = navigator.msMaxTouchPoints && navigator.msMaxTouchPoints > 1;\nconst hasPointer = !!window.navigator.msPointerEnabled;\nconst hasKeyDown = 'onkeydown' in document;\n\n\n\nconst DEFAULTS = {\n\tfps: 60,\n\ttimeout: 200,\n\tpassive: true\n};\n\n\n\nexport default class ScrollListener {\n\n\tstatic getScroll() {\n\t\tlet { scrollX, scrollY } = window;\n\n\t\tif (scrollX === undefined || scrollY === undefined) {\n\t\t\tscrollX = document.documentElement.scrollLeft || document.body.scrollLeft || 0;\n\t\t\tscrollY = document.documentElement.scrollTop || document.body.scrollTop || 0;\n\t\t}\n\n\t\treturn {\n\t\t\tscrollX,\n\t\t\tscrollY\n\t\t};\n\t}\n\n\t/**\n\t * @constructor\n\t * @param {object} options\n\t * @property {number} fps - frequency / updates per second\n\t * @property {number} timeout - amount of time in ms to allow for same result before turning off listeners\n\t */\n\tconstructor(options) {\n\t\tthis.options = Object.assign({}, DEFAULTS, options);\n\t\tthis._listeners = [];\n\t\tthis._internalListeners = [];\n\t}\n\n\t/**\n\t * Notify consumer listeners\n\t * @private\n\t * @param {object} event\n\t */\n\t_notify(event) {\n\t\tconst { _listeners } = this;\n\t\tfor (let i = 0; i < _listeners.length; i++) {\n\t\t\t_listeners[i](event);\n\t\t}\n\t}\n\n\t/**\n\t * Continously listen for scroll position\n\t * @private\n\t * @param {object} event - original event object\n\t */\n\t_start(event) {\n\t\tthis._stop();\n\t\tconst { fps, timeout } = this.options;\n\t\tconst { scrollX, scrollY } = ScrollListener.getScroll();\n\n\t\t// Calculate delta based on last event if available\n\t\tlet deltaX = 0,\n\t\t\tdeltaY = 0,\n\t\t\tisFirstEvent = false;\n\t\tif (!this._lastSeen) {\n\t\t\tisFirstEvent = true;\n\n\t\t} else {\n\t\t\tconst { scrollX: lastSeenScrollX, scrollY: lastSeenScrollY } = this._lastSeen;\n\t\t\tdeltaX = scrollX - (lastSeenScrollX || scrollX);\n\t\t\tdeltaY = scrollY - (lastSeenScrollY || scrollY);\n\t\t}\n\n\t\tthis._lastSeen = {\n\t\t\tscrollX,\n\t\t\tscrollY\n\t\t};\n\n\t\t// If we're not moving and this isn't the first event, don't trigger events.\n\t\tif (!isFirstEvent && deltaX === 0 && deltaY === 0) {\n\t\t\tthis._stopTime = this._stopTime || Date.now();\n\n\t\t// Else, trigger events\n\t\t} else {\n\t\t\tthis._stopTime = null;\n\n\t\t\tconst internalEvent = {\n\t\t\t\tx: scrollX,\n\t\t\t\ty: scrollY,\n\t\t\t\tdeltaX,\n\t\t\t\tdeltaY,\n\t\t\t\toriginalEvent: event\n\t\t\t};\n\t\t\tthis._notify(internalEvent);\n\t\t}\n\n\t\t// Check if we haven't updated for the duration of our timeout\n\t\tlet doLoop = true;\n\t\tif (this._stopTime && Date.now() - this._stopTime >= timeout) {\n\t\t\tdoLoop = false;\n\t\t\tthis._stopTime = null;\n\t\t}\n\n\t\t// If we're still moving / updating, keep looping\n\t\tif (doLoop) {\n\t\t\tthis._startTimer = setTimeout(() => this._animationFrame = raf(() => {\n\t\t\t\tthis._start(event);\n\t\t\t}), 1000 / fps);\n\t\t}\n\t}\n\n\t/**\n\t * Stop continous listener\n\t * @private\n\t */\n\t_stop() {\n\t\tclearTimeout(this._startTimer);\n\t\traf.cancel(this._animationFrame);\n\t}\n\n\t/**\n\t * Register internal listeners\n\t * @private\n\t * @param {object} event\n\t */\n\t_initListeners() {\n\t\tthis._destroyListeners();\n\n\t\tthis._internalListeners = [];\n\n\t\tthis._addListeners();\n\n\t\tthis._isInitialized = true;\n\t}\n\n\t/**\n\t * Add internal listeners to a single element\n\t * @private\n\t * @param {object} event\n\t */\n\t_addListeners(element = document) {\n\t\tlet { passive } = this.options;\n\n\t\tlet syntheticListener = event => this._start(event);\n\t\telement.addEventListener('syntheticScroll', syntheticListener, { passive });\n\t\tthis._internalListeners.push({\n\t\t\telement: element,\n\t\t\ttype: 'synthetic',\n\t\t\tlistener: syntheticListener\n\t\t});\n\n\t\tlet loadListener = event => setTimeout(() => {\n\t\t\tthis._start(event);\n\t\t}, 500);\n\t\twindow.addEventListener('load', loadListener, { passive });\n\t\tthis._internalListeners.push({\n\t\t\telement: window,\n\t\t\ttype: 'load',\n\t\t\tlistener: loadListener\n\t\t});\n\n\t\tlet scrollListener = event => this._start(event);\n\t\telement.addEventListener('scroll', scrollListener, { passive });\n\t\tthis._internalListeners.push({\n\t\t\telement: element,\n\t\t\ttype: 'scroll',\n\t\t\tlistener: scrollListener\n\t\t});\n\n\t\tif (hasWheelEvent) {\n\t\t\tlet wheelListener = event => this._start(event);\n\t\t\telement.addEventListener('wheel', wheelListener, { passive });\n\t\t\tthis._internalListeners.push({\n\t\t\t\telement: element,\n\t\t\t\ttype: 'wheel',\n\t\t\t\tlistener: wheelListener\n\t\t\t});\n\t\t}\n\n\t\tif (hasMouseWheelEvent) {\n\t\t\tlet mouseWheelListener = event => this._start(event);\n\t\t\telement.addEventListener('mousewheel', mouseWheelListener, { passive });\n\t\t\tthis._internalListeners.push({\n\t\t\t\telement: element,\n\t\t\t\ttype: 'mousewheel',\n\t\t\t\tlistener: mouseWheelListener\n\t\t\t});\n\t\t}\n\n\t\tif (hasTouch) {\n\t\t\tlet touchStartListener = event => this._start(event);\n\t\t\telement.addEventListener('touchstart', touchStartListener, { passive });\n\t\t\tthis._internalListeners.push({\n\t\t\t\telement: element,\n\t\t\t\ttype: 'touchstart',\n\t\t\t\tlistener: touchStartListener\n\t\t\t});\n\n\t\t\tlet touchMoveListener = event => this._start(event);\n\t\t\telement.addEventListener('touchmove', touchMoveListener, { passive });\n\t\t\tthis._internalListeners.push({\n\t\t\t\telement: element,\n\t\t\t\ttype: 'touchmove',\n\t\t\t\tlistener: touchMoveListener\n\t\t\t});\n\t\t}\n\n\t\tif (hasPointer && hasTouchWin) {\n\t\t\tthis._bodyTouchAction = document.body.style.msTouchAction;\n\t\t\tdocument.body.style.msTouchAction = 'none';\n\n\t\t\tlet touchStartListener = event => this._start(event);\n\t\t\telement.addEventListener('MSPointerDown', touchStartListener, true);\n\t\t\tthis._internalListeners.push({\n\t\t\t\telement: element,\n\t\t\t\ttype: 'MSPointerDown',\n\t\t\t\tlistener: touchStartListener,\n\t\t\t\tuseCapture: true\n\t\t\t});\n\n\t\t\tlet touchMoveListener = event => this._start(event);\n\t\t\telement.addEventListener('MSPointerMove', touchMoveListener, true);\n\t\t\tthis._internalListeners.push({\n\t\t\t\telement: element,\n\t\t\t\ttype: 'MSPointerMove',\n\t\t\t\tlistener: touchMoveListener,\n\t\t\t\tuseCapture: true\n\t\t\t});\n\t\t}\n\n\t\tif (hasKeyDown) {\n\t\t\tlet keyDownListener = event => this._start(event);\n\t\t\telement.addEventListener('keydown', keyDownListener, { passive });\n\t\t\tthis._internalListeners.push({\n\t\t\t\telement: element,\n\t\t\t\ttype: 'keydown',\n\t\t\t\tlistener: keyDownListener\n\t\t\t});\n\t\t}\n\n\t}\n\n\t/**\n\t * Deregister internal listeners\n\t * @private\n\t * @param {object} event\n\t */\n\t_destroyListeners() {\n\t\tthis._internalListeners.forEach(obj => obj.element.removeEventListener(obj.type, obj.listener, obj.useCapture));\n\n\t\tthis._isInitialized = false;\n\t}\n\n\t/**\n\t * Hook for consumer to register VS listener\n\t * @public\n\t * @param {function} listener\n\t */\n\ton(listener) {\n\t\tif (!this._isInitialized) {\n\t\t\tthis._initListeners();\n\t\t}\n\n\t\treturn this._listeners.push(listener);\n\t}\n\n\t/**\n\t * Hook for consumer to deregister VS listener\n\t * @public\n\t * @param {number} index\n\t */\n\toff(index) {\n\t\tif (index) {\n\t\t\tthis._listeners.splice(index, 1);\n\t\t} else {\n\t\t\tthis._listeners = [];\n\t\t}\n\n\t\tif (this._listeners.length <= 0) {\n\t\t\tthis._destroyListeners();\n\t\t}\n\t}\n\n\t/**\n\t * Destroy all listeners\n\t * @public\n\t */\n\tdestroy() {\n\t\tthis.off();\n\t}\n}\n","'use strict';\n\nimport './custom-event-polyfill';\nimport Spring from './spring';\nimport ScrollListener from './scroll-listener';\n\n/**\n * Scroll animation helper\n * @private\n */\nconst spring = new Spring({\n\tcallback: ({ current }) => setScrollTop(current),\n\tacceleration: 0.05,\n\tmargin: 1\n});\n\n\n/**\n * Prevent scroll events while we're animating\n * @private\n */\nlet listener;\ndocument.addEventListener('DOMContentLoaded', () => {\n\tlistener = new ScrollListener({ id: 'koa-scroll-to', passive: false });\n\tlistener.on(event => isAnimatingScroll() === true && event.originalEvent.preventDefault());\n});\n\n/**\n * Get scrollTop cross browser\n * @private\n */\nfunction getScrollTop() {\n\treturn ScrollListener.getScroll().scrollY;\n}\n\n/**\n * Set scrollTop cross browser\n * @private\n * @param {integer} px\n */\nfunction setScrollTop(px) {\n\tdocument.documentElement.scrollTop = document.body.scrollTop = px;\n\n\t// Throw a synthetic scroll event, which in turn can be caught by the ScrollListener class\n\tconst event = new CustomEvent('syntheticScroll', {\n\t\tbubbles: true,\n\t\tcancelable: false,\n\t\tdetail: null,\n\t\ttype: 'syntheticScroll'\n\t});\n\tdocument.dispatchEvent(event);\n}\n\n/**\n * Animate scrollTop to a given pixel value\n * @public\n * @param {integer} target\n */\nexport default function scrollTo(target) {\n\tspring\n\t\t.forceState({\n\t\t\tcurrent: getScrollTop(),\n\t\t\ttarget: getScrollTop()\n\t\t})\n\t\t.setTarget(target);\n}\n\n/**\n * Animate scrollTop a given distance\n * @public\n * @param {integer} distance\n */\nexport function scrollDistance(distance) {\n\tscrollTo(getScrollTop() + distance);\n}\n\n/**\n * Animate scrollTop to given element\n * @public\n * @param {DOMElement} element\n */\nexport function scrollToElement(element) {\n\tscrollTo(element.getBoundingClientRect().top);\n}\n\n/**\n * Getter for checking animation status\n * @public\n */\nexport function isAnimatingScroll() {\n\treturn !!spring._isAnimating;\n}\n","import raf from 'raf';\n\n\n\n/**\n * Default state\n */\nconst DEFAULT_STATE = {\n\tcurrent: 0,\n\ttarget: 0,\n\tvelocity: 0\n};\n\n/**\n * Abstract spring animation\n */\nexport default class Spring {\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(settings, state) {\n\t\tthis._init(settings, state);\n\t}\n\n\t/**\n\t * Init\n\t * Set base settings for spring.\n\t * @param {object} settings\n\t * @property {function} callback - Callback to call each step\n\t * @property {number} acceleration - Stiffness / acceleration\n\t * @property {number} damper - Dampens velocity. should be between 0 and 1.\n\t * @property {number} margin - Determines target accuracy\n\t * @param {object} state\n\t * @property {number} current - Current position\n\t * @property {number} target - Target position\n\t * @property {number} velocity - Velocity\n\t */\n\t_init({ callback, acceleration = 0.2, damper = 0.85, id, margin = 0.0001 } = {}, state = {}) {\n\t\tthis._settings = {\n\t\t\tacceleration,\n\t\t\tcallback,\n\t\t\tdamper,\n\t\t\tid,\n\t\t\tmargin\n\t\t};\n\n\t\tthis._state = Object.assign({}, DEFAULT_STATE, state);\n\t}\n\n\t/**\n\t * Update state and let callbacks know\n\t * @private\n\t */\n\t_step() {\n\t\tconst { acceleration, callback, damper, margin } = this._settings;\n\t\tlet { current, target, velocity } = this._state;\n\n\t\t// If we've already reached the target, return without doing anything\n\t\tif (Math.abs(target - current) < margin) {\n\t\t\tthis.stop();\n\t\t\treturn;\n\t\t}\n\n\t\t// Do math to animate\n\t\tlet distance = target - current;\n\t\tvelocity *= 1 - damper;\n\t\tvelocity += distance * acceleration;\n\t\tcurrent += velocity;\n\n\t\t// Update internal state\n\t\tthis._state = {\n\t\t\tcurrent,\n\t\t\ttarget,\n\t\t\tvelocity\n\t\t};\n\n\t\t// Call callback if available\n\t\tif (callback) {\n\t\t\tcallback({ ...this._state });\n\t\t}\n\n\t\t// Animation loop / iteration\n\t\tthis._raf();\n\t}\n\n\t/**\n\t * Request animation frame\n\t * @private\n\t */\n\t_raf() {\n\t\tthis._isAnimating = true;\n\t\tthis._animationFrame = raf(() => this._step());\n\t}\n\n\t/**\n\t * Stop animation\n\t * @public\n\t */\n\tstop() {\n\t\tif (this._isAnimating) {\n\t\t\tclearTimeout(this._timeoutHandle);\n\t\t\traf.cancel(this._animationFrame);\n\t\t\tthis._isAnimating = false;\n\t\t}\n\t}\n\n\t/**\n\t * Reset Spring\n\t * @public\n\t */\n\treset(settings, state) {\n\t\tthis.stop();\n\n\t\tthis._init({\n\t\t\t...this._settings,\n\t\t\t...settings\n\t\t}, state);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all animation and hard update internal state\n\t * @public\n\t * @param {object} state\n\t * @property {number} current - current position\n\t * @property {number} target - target position\n\t * @property {number} velocity - velocity\n\t */\n\tforceState(state) {\n\t\tthis.stop();\n\t\tthis._state = Object.assign({}, DEFAULT_STATE, this._state, state);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set new target and start animation\n\t * @public\n\t * @param {number} target\n\t */\n\tsetTarget(target = 0) {\n\t\tif (target === this._state.target) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._state = {\n\t\t\t...this._state,\n\t\t\ttarget\n\t\t};\n\n\t\tthis.start();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start spring\n\t * @public\n\t */\n\tstart() {\n\t\tif (!this._isAnimating) {\n\t\t\tthis._raf();\n\t\t}\n\n\t\treturn this;\n\t}\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}